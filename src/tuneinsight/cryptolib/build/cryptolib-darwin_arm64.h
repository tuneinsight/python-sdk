/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package command-line-arguments */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */




/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif


// GetLastGoError returns the last error generated by the Go code
//
extern char* GetLastGoError();

// NewPolynomialCkksParams creates a new set of ckks parameters given test params for polynomial evaluation
// and returns them serialized with Marshall Binary and encoded in base64
//
extern char* NewPolynomialCkksParams();

// NewTestPredictionParams creates a new set of CkksOperator ckks given test params for prediction
// and returns them serialized with Marshall Binary and encoded in base64
//
extern char* NewTestPredictionParams();

// NewCkksOperatorFromB64Parameters takes a b64 encoded marshalled ckks.Parameters to
// instantiate a new ckks operator.
//
extern char* NewCkksOperatorFromB64Parameters(char* b64params);

// NewCkksOperatorFromB64SchemeContext takes a b64 encoded marshalled scheme.Context to
// instantiate a new ckks operator.
//
extern char* NewCkksOperatorFromB64SchemeContext(char* b64Context);

// GenKeyPair generates a serialized key pair using as first argument the id of the CkksOperator
//
extern char* GenKeyPair(char* id);
extern char* GetSecretKeyB64(char* id);
extern char* GetPublicKeyB64(char* id);

// GetRelinearizationKeyBytes returns the bytes of the relinearization key
//
extern void* GetRelinearizationKeyBytes(char* id);

// EncryptFloatMatrix encrypts a float matrix to a Ciphertable
//
extern void* EncryptFloatMatrix(char* id, char* plaintext);

// DecryptCipherTable decrypts a ciphertable
//
extern char* DecryptCipherTable(char* id, void* ciphertext, size_t textSize);

// DecryptStatistics decrypts the content of an encrypted statistics (a list of ciphertexts)
//
extern char* DecryptStatistics(char* id, void* ciphertext, size_t textSize);

// DecryptPredictionResult decrypts a prediction result using as first argument the id of the cryptosystem
// and bytes of the marshaled encrypted prediction along with its byte size
//
extern void* DecryptPredictionResult(char* id, void* ciphertext, size_t ctSize);

// EncryptPredictionDataset encrypts a data taking as arguments:
// 1. the id of the cryptosystem,
// 2. the csv bytes
// 3. the csv size
// 4. the predParams as b64 marshaled PredictionParams
// 5. if the header (first line) should be removed as boolean
//
extern void* EncryptPredictionDataset(char* id, void* csv, size_t csvSize, char* b64PredParams, int removeHeader);

// GenRelinearizationKey generates a relinearization using as first argument the id of the CkksOperator
// write a test that calls one of those functions
// pass failing payload: catch error in python
//
extern char* GenRelinearizationKey(char* id);

// EncodeBase64Url encodes binary data into Base64 URL
//
extern char* EncodeBase64Url(void* bytes, size_t size);

// DecodeBase64Url decodes binary data from Base64 URL
//
extern void* DecodeBase64Url(char* base64data);

// DecodeBase64UrlSize decodes binary data from Base64 URL
//
extern size_t DecodeBase64UrlSize(char* base64data);

// Create an evaluator for subsequent mathematical operations
//
extern char* GenerateEvaluator(char* id);

// GenerateEncryptor instantiates the encryptor in the ckks operator.
//
extern char* GenerateEncryptor(char* id);

// GenerateDecryptor instaniates the decryptor in the ckks operator.
//
extern char* GenerateDecryptor(char* id);

// Instantiate the scheme for subsequent mathematical operations
//
extern char* InstantiateScheme(char* id);

// Encrypt a numeric value
//
extern void* EncryptNumber(char* id, char* number);

// DecryptNumber decrypts a ciphertable
//
extern void* DecryptNumber(char* id, void* ciphertext, size_t textSize);

// NewPIRContext creates a new PIR context given the user metadata
//
extern char* NewPIRContext(char* b64DBparams, char* b64Index);

// GetPIREvaluationKeyBytes returns the bytes of the evaluation key using the PIR context
//
extern void* GetPIREvaluationKeyBytes(char* id);

// EncryptPIRQuery encrypts a the query search term using as arguments:
// - id of the PIR context as first argument
// - query as a string
//
extern void* EncryptPIRQuery(char* id, char* query);

// DecryptPIRResult decrypts a PIR result using as arguments:
// - id of the cryptosystems first argument
// - bytes of a marshalled cryptolib.EncryptedPirResult
// returns the bytes of the csv decrypted result
//
extern void* DecryptPIRResult(char* id, void* resultBytes, size_t resultSize);

// Add adds two encrypted numbers
//
extern void* Add(char* id, void* number1, void* number2, size_t number1Size, size_t number2Size);

// Multiply multiplies two encrypted numbers
//
extern void* Multiply(char* id, void* number1, void* number2, size_t number1Size, size_t number2Size);

// PolynomialEvaluation evaluates an encrypted number on a polynomial
//
extern void* PolynomialEvaluation(char* id, char* polynomialCoefficients, size_t polynomialCoefficientsSize, void* number, size_t numberSize);

#ifdef __cplusplus
}
#endif
