"""Classes to interact with encryption sessions in a Tune Insight instance."""

import pandas as pd
from tuneinsight.api.sdk import Client
from tuneinsight.api.sdk.models import (
    SessionDefinition,
    DataObjectType,
    KeyInfo,
    PrivateSearchDatabase,
)
from tuneinsight.api.sdk.models import Session as APISession
from tuneinsight.client.validation import validate_response
from tuneinsight.api.sdk.api.api_sessions import post_session
from tuneinsight.api.sdk.types import Response
from tuneinsight.cryptolib.cryptolib import (
    new_hefloat_operator_from_b64_scheme_context,
    get_relin_key_bytes,
    PIRContext,
)
from tuneinsight.client.dataobject import DataObject
from tuneinsight.utils.io import data_from_bytes


class Session:
    """
    Represents a backend multiparty homomorphic encryption session.

    This keeps track of the set of public and HE evaluation keys that are generated by a user.
    """

    session_id: str
    client: Client
    cryptolib_params: str

    def __init__(self, client: Client, cryptolib_params: str):
        """
        Initializes the session.

        Args:
            client (Client): client to which the session is linked
            cryptolib_params (str): cryptolib parameters
        """
        self.client = client
        self.cryptolib_params = cryptolib_params
        self.session_id = self._new_session()

    def _new_session(self) -> str:
        """
        Creates a new session.

        Returns:
            str: id of the new session
        """
        sess_def = SessionDefinition(params=self.cryptolib_params)
        sess_resp: Response[APISession] = post_session.sync_detailed(
            client=self.client, json_body=sess_def
        )
        validate_response(sess_resp)
        s_id = sess_resp.parsed.id
        return s_id

    def upload_eval_keys(self) -> bytes:
        """
        Generates and uploads the evaluation keys of this session.

        Returns:
            bytes: cryptosystem id
        """
        # Load the parameters into a cryptosystem
        cs_id = new_hefloat_operator_from_b64_scheme_context(str(self.cryptolib_params))
        # Generate and upload relinearization key
        rlk_bytes = get_relin_key_bytes(cs_id)
        key_info = KeyInfo(collective=False)
        do_type = DataObjectType.RLWE_RELINEARIZATION_KEY
        DataObject.create(
            client=self.client,
            do_type=do_type,
            session_id=self.session_id,
            encrypted=False,
            key_info=key_info,
            data=rlk_bytes,
        )
        return cs_id

    def upload_data(self, data: bytes, do_type: DataObjectType) -> str:
        """
        Uploads data to the session.

        Args:
            data (bytes): data to upload
            do_type (DataObjectType): data object type

        Returns:
            str: id of the uploaded data object
        """
        data_object = DataObject.create(
            client=self.client,
            do_type=do_type,
            session_id=self.session_id,
            encrypted=True,
            data=data,
        )
        return data_object.model.unique_id


class PIRSession(Session):
    """Session for the private information retrieval (PIR) protocol."""

    ctx: PIRContext

    def __init__(self, client, pir_db: PrivateSearchDatabase):
        super().__init__(client, pir_db.cryptosystem_params)
        self.ctx = PIRContext(pir_db.database_params, pir_db.database_index)

    def upload_eval_keys(self):
        """Uploads evaluation keys to PIR session"""
        evk = self.ctx.get_eva_key()
        key_info = KeyInfo(collective=False)
        do_type = DataObjectType.RLWE_MEM_EVALUATION_KEY_SET
        DataObject.create(
            client=self.client,
            do_type=do_type,
            session_id=self.session_id,
            encrypted=False,
            key_info=key_info,
            data=evk,
        )

    def encrypt_query(self, query: str) -> str:
        """Encrypts a private search query

        Args:
            query (str): query to encrypt

        Returns:
            str: encrypted query
        """
        query_data = self.ctx.encrypt_query(query)
        return self.upload_data(query_data, DataObjectType.ENCRYPTED_PIR_SEARCH)

    def decrypt_response(self, response: bytes) -> pd.DataFrame:
        """Decrypts a private search response

        Args:
            response (bytes): encrypted PIR response

        Returns:
            pd.DataFrame: decrypted PIR response
        """
        csv = self.ctx.decrypt_response(response)
        return data_from_bytes(csv)
